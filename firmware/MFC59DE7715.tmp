/*! *******************************************************************************************************
* Copyright (c) 2018 Kristóf Szabolcs Horváth
*
* All rights reserved
*
* \file matrix.c
*
* \brief Keyboard matrix interface
*
* \author Kristóf Sz. Horváth
*
**********************************************************************************************************/

//--------------------------------------------------------------------------------------------------------/
// Include files
//--------------------------------------------------------------------------------------------------------/
#include <string.h>
#include <ioavr.h>
#include "types.h"
#include "amiga_key.h"
#include "avr_gpio.h"
#include "serial.h"

// Own include
#include "matrix.h"


//--------------------------------------------------------------------------------------------------------/
// Definitions
//--------------------------------------------------------------------------------------------------------/
// Matrix definitions
#define MATRIX_ROW      6    //!< Number of rows in the keyboard matrix (max. 8)
#define MATRIX_COL      15   //!< Number of columns in the keyboard matrix (note, that there are max. 8 rows)
#define MATRIX_SAMPLE   2    //!< Number of samples per key -- used for debouncing


//--------------------------------------------------------------------------------------------------------/
// Types
//--------------------------------------------------------------------------------------------------------/
//! \brief Element of logic bit -- GPIO pin assignment tables


volatile unsigned char debug_byte = 0;


// Amiga 1200 keyboard connector pinout
// PIN:    1    2    3    4    5    6    7    8     9   10    11    12   13    14    15    16    17    18    19    20   21   22   23   24   25   26   27   28   29   30   31
// SIGNAL: ROW2 ROW3 ROW4 ROW5 ROW1 R.SH ROW0 R.ALT VCC R.Ami LCTRL L.SH L.ALT L.Ami COL14 COL13 COL12 COL11 COL10 COL9 COL8 COL7 COL6 COL5 COL4 COL3 COL2 COL1 COL0 GND  CAPSLED
// PORT:   PC4  PC5  PC6  PC7  PC3  PE5  PC2  PE6       PB0   PB1   PB2  PB3   PE4   PE3   PE2   PD5   PD4   PD3   PD2  PD1  PD0  PA0  PA1  PA2  PA3  PA4  PA5  PA6       PA7

   
//--------------------------------------------------------------------------------------------------------/
// Constants
//--------------------------------------------------------------------------------------------------------/
//!\brief Matrix rows -- there are max. 8 rows!
 const S_MATRIX_GPIO_DESC gcsKeyMatrixRows[ MATRIX_ROW ] =
{
  { &PORTC, &PINC, &DDRC, (1 << PORTC2) },   //!< ROW0
  { &PORTC, &PINC, &DDRC, (1 << PORTC3) },   //!< ROW1
  { &PORTC, &PINC, &DDRC, (1 << PORTC4) },   //!< ROW2
  { &PORTC, &PINC, &DDRC, (1 << PORTC5) },   //!< ROW3
  { &PORTC, &PINC, &DDRC, (1 << PORTB6) },   //!< ROW4
  { &PORTC, &PINC, &DDRC, (1 << PORTC7) }    //!< ROW5
};

//!\brief Matrix columns
 const S_MATRIX_GPIO_DESC gcsKeyMatrixColumns[ MATRIX_COL ] =
{
  { &PORTA, &PINA, &DDRA, (1 << PORTA6) },   //!< COL0
  { &PORTA, &PINA, &DDRA, (1 << PORTA5) },   //!< COL1
  { &PORTA, &PINA, &DDRA, (1 << PORTA4) },   //!< COL2
  { &PORTA, &PINA, &DDRA, (1 << PORTA3) },   //!< COL3
  { &PORTA, &PINA, &DDRA, (1 << PORTA2) },   //!< COL4
  { &PORTA, &PINA, &DDRA, (1 << PORTA1) },   //!< COL5
  { &PORTA, &PINA, &DDRA, (1 << PORTA0) },   //!< COL6
  { &PORTD, &PIND, &DDRD, (1 << PORTD0) },   //!< COL7
//  { &PORTD, &DDRD, (1 << PORTD1) },   //!< COL8  // *****
  { &PORTE, &PINE, &DDRE, (1 << PORTE0) },   //!< COL8  // ***** Debug!
  { &PORTD, &PIND, &DDRD, (1 << PORTD2) },   //!< COL9
  { &PORTD, &PIND, &DDRD, (1 << PORTD3) },   //!< COL10
  { &PORTD, &PIND, &DDRD, (1 << PORTD4) },   //!< COL11
  { &PORTD, &PIND, &DDRD, (1 << PORTD5) },   //!< COL12
  { &PORTE, &PINE, &DDRE, (1 << PORTE2) },   //!< COL13
  { &PORTE, &PINE, &DDRE, (1 << PORTE4) }    //!< COL14
};

//! \brief Matrix to scancode translation tables
//! \note  Invalid keys are marked with 0xFFu
static const U8 gcau8ScanCodeTable[ MATRIX_ROW ][ MATRIX_COL ] =
{
//  COL0   COL1   COL2   COL3   COL4   COL5   COL6   COL7   COL8   COL9   COL10  COL11  COL12  COL13  COL14 
  { 0x2Eu, 0x3Du, 0x1Du, 0x1Eu, 0x5Au, 0x59u, 0x58u, 0x57u, 0x56u, 0x55u, 0x54u, 0x53u, 0x52u, 0x51u, 0x50u },  // ROW0
  { 0x46u, 0x41u, 0x0Du, 0x0Cu, 0x0Bu, 0x0Au, 0x09u, 0x08u, 0x07u, 0x06u, 0x05u, 0x04u, 0x03u, 0x02u, 0x01u },  // ROW1
  { 0x2Fu, 0x5Fu, 0x44u, 0x1Bu, 0x1Au, 0x19u, 0x18u, 0x17u, 0x16u, 0x15u, 0x14u, 0x13u, 0x12u, 0x11u, 0x10u },  // ROW2
  { 0x2Du, 0x4Cu, 0x2Bu, 0x2Au, 0x29u, 0x28u, 0x27u, 0x26u, 0x25u, 0x24u, 0x23u, 0x22u, 0x21u, 0x20u, 0x62u },  // ROW3
  { 0x4Eu, 0x4Du, 0x4Fu, 0x61u, 0x3Au, 0x39u, 0x38u, 0x37u, 0x36u, 0x35u, 0x34u, 0x33u, 0x32u, 0x31u, 0x30u },  // ROW4
  { 0x5Eu, 0x3Eu, 0x0Fu, 0x65u, 0x67u, 0x5Bu, 0x3Cu, 0x1Fu, 0x3Fu, 0x5Cu, 0x43u, 0x4Au, 0x5Du, 0x40u, 0x66u }   // ROW5
};
/*
  { 0x2Eu, 0x3Du, 0x1Du, 0x1Eu, 0x5Au, 0x59u, 0x58u, 0x57u, 0x56u, 0x55u, 0x54u, 0x53u, 0x52u, 0x51u, 0x50u, 0x45u },  // ROW0
  { 0x46u, 0x41u, 0x0Du, 0x0Cu, 0x0Bu, 0x0Au, 0x09u, 0x08u, 0x07u, 0x06u, 0x05u, 0x04u, 0x03u, 0x02u, 0x01u, 0x00u },  // ROW1
  { 0x2Fu, 0x5Fu, 0x44u, 0x1Bu, 0x1Au, 0x19u, 0x18u, 0x17u, 0x16u, 0x15u, 0x14u, 0x13u, 0x12u, 0x11u, 0x10u, 0x42u },  // ROW2
  { 0x2Du, 0x4Cu, 0x2Bu, 0x2Au, 0x29u, 0x28u, 0x27u, 0x26u, 0x25u, 0x24u, 0x23u, 0x22u, 0x21u, 0x20u, 0x62u, 0x63u },  // ROW3
  { 0x4Eu, 0x4Du, 0x4Fu, 0x61u, 0x3Au, 0x39u, 0x38u, 0x37u, 0x36u, 0x35u, 0x34u, 0x33u, 0x32u, 0x31u, 0x30u, 0x60u },  // ROW4
  { 0x5Eu, 0x3Eu, 0x0Fu, 0x65u, 0x67u, 0x5Bu, 0x3Cu, 0x1Fu, 0x3Fu, 0x5Cu, 0x43u, 0x4Au, 0x5Du, 0x40u, 0x66u, 0x64u }   // ROW5
*/
//-----------------------------------------------------------------------------------------------------------------
// Our keyboard matrix looks like this (Amiga Compatible Keyboard Rev. A) -- marked as German keyboard:
//       COL15 COL14 COL13 COL12 COL11 COL10 COL9  COL8  COL7  COL6  COL5   COL4   COL3   COL2   COL1   COL0 
// ROW0  ESC    F1    F2    F3    F4    F5    F6    F7    F8    F9    F10    N.(    N.2    N.1    N.7    N.5   ROW0
// ROW1   ~     1     2     3     4     5     6     7     8     9     0      ß      '      \     Bkspc   Del   ROW1
// ROW2  TAB    Q     W     E     R     T     Z     U     I     O     P      Ü      +      Ret   Help    N.6   ROW2
// ROW3  Ctrl  Caps   A     S     D     F     G     H     J     K     L      Ö      Ä      #      Up     N.4   ROW3
// ROW4  LShft  <>    Y     X     C     V     B     N     M     ,     .      -     RShift Left   Down   Right  ROW4
// ROW5  L-Alt LAmi  Spc   N.*   N.-   N.Ent N./   N.9   N.3   N..   N.)    RAmi   RAlt    N.0    N.8    N.+   ROW5
//-----------------------------------------------------------------------------------------------------------------


//--------------------------------------------------------------------------------------------------------/
// Global variables
//--------------------------------------------------------------------------------------------------------/
U8 gau8KeyMatrixSample[ MATRIX_COL ][ MATRIX_SAMPLE ];  //!< Used for sampling and debouncing (bitfield, 0 means pressed, 1 means not pressed)
U8 gau8KeyMatrixState[ MATRIX_COL ];                    //!< Current state of the keys (bitfield, 0 means pressed, 1 means not pressed)
U8 gau8KeyEventPressed[ MATRIX_COL ];                   //!< Press events of the keys (bitfield, 1 means press, 0 means no event)
U8 gau8KeyEventReleased[ MATRIX_COL ];                  //!< Release events of the keys (bitfield, 1 means release, 0 means no event)

U8 u8Column = 0;
U8 u8Sample = 0;
//--------------------------------------------------------------------------------------------------------/
//  functions
//--------------------------------------------------------------------------------------------------------/
/*! *******************************************************************
 * \brief  Sets the column of the matrix
 * \param  u8Column: value to set
 * \return -
 *********************************************************************/
 void SetColumn( U8 u8Column )
{
  U8 u8Index;
  
//   putstr("Col 0x"); puthexbyte(u8Column);putstr("\r"); // DEbug
          
  for( u8Index = 0; u8Index < MATRIX_COL; u8Index++ )  // Columns
  {
    if( u8Column == u8Index )
    {
       *(gcsKeyMatrixColumns[ u8Index ].psGPIOPort) &= ~(gcsKeyMatrixColumns[ u8Index ].ePin);
       *(gcsKeyMatrixColumns[ u8Index ].psGPIODIR) |= (gcsKeyMatrixColumns[ u8Index ].ePin);

    }
    else
    {
     *(gcsKeyMatrixColumns[ u8Index ].psGPIOPort) |= (gcsKeyMatrixColumns[ u8Index ].ePin);
     *(gcsKeyMatrixColumns[ u8Index ].psGPIODIR) &= ~(gcsKeyMatrixColumns[ u8Index ].ePin);
    }
  }
}



/*! *******************************************************************
 * \brief  Module init
 * \param  -
 * \return -
 * \note   Must be called before Matrix_Cycle(), or the IT routine!
 *********************************************************************/
void Matrix_Init( void )
{
  U8 u8Index;
  
  // GPIO init
  for( u8Index = 0u; u8Index < MATRIX_ROW; u8Index++ )  // Rows
  {
    // GPIO_Init as input
              *(gcsKeyMatrixRows[ u8Index ].psGPIODIR) &= ~gcsKeyMatrixRows[ u8Index ].ePin;
// Enable pull-ups for debug              
              *(gcsKeyMatrixRows[ u8Index ].psGPIOPort) |= gcsKeyMatrixRows[ u8Index ].ePin;
  }
  for( u8Index = 0u; u8Index < MATRIX_COL; u8Index++ )  // Columns
  {
    // Init as output, high level.
    // GPIO_Init( gcsKeyMatrixColumns[ u8Index ].psGPIOPort, gcsKeyMatrixColumns[ u8Index ].ePin, GPIO_MODE_OUT_OD_LOW_FAST );
    *(gcsKeyMatrixColumns[ u8Index ].psGPIOPort) |= (gcsKeyMatrixColumns[ u8Index ].ePin);
    *(gcsKeyMatrixColumns[ u8Index ].psGPIODIR) &= ~(gcsKeyMatrixColumns[ u8Index ].ePin);
  }
  
  // Globals init
  memset( (void*)gau8KeyMatrixSample,  0xFFu, sizeof( gau8KeyMatrixSample ) );
  memset( (void*)gau8KeyMatrixState,   0xFFu, sizeof( gau8KeyMatrixState ) );
  memset( (void*)gau8KeyEventPressed,  0x00u, sizeof( gau8KeyEventPressed ) );
  memset( (void*)gau8KeyEventReleased, 0x00u, sizeof( gau8KeyEventReleased ) );
}

/*! *******************************************************************
 * \brief  Main cycle
 * \param  -
 * \return -
 * \note   Must be called from main cycle!
 *********************************************************************/
void Matrix_Cycle( void )
{
  U8 u8Row, u8Column;
  U8 u8ScanCode;

  // note: this cycle can be blocked by AmigaKey_Cycle()
  
  // search for new events
  for( u8Column = 0u; u8Column < MATRIX_COL; u8Column++ )
  {
    for( u8Row = 0u; u8Row < MATRIX_ROW; u8Row++ )
    {
      if(  (1u<<u8Row) & gau8KeyEventPressed[ u8Column ] )  // if there is a press event
      {
        u8ScanCode = gcau8ScanCodeTable[ u8Row ][ u8Column ];  // translating the matrix code to scancode
//        putstr("+++0x"); puthexbyte(u8ScanCode);putstr("\r"); // DEbug
        if( TRUE == AmigaKey_RegisterScanCode( u8ScanCode, TRUE ) )
        {
          gau8KeyEventPressed[ u8Column ] &= ~(1<<u8Row);
        }
        else  // scancode buffer full, terminate cycle
        {
          u8Row = MATRIX_ROW;
          u8Column = MATRIX_COL;
        }
      }
      else if( 0u != ( (1u<<u8Row) & gau8KeyEventReleased[ u8Column ] ) )  // if there is a release event
      {
        u8ScanCode = gcau8ScanCodeTable[ u8Row ][ u8Column ];  // translating the matrix code to scancode
        
        putstr("Scan code :  0x"); puthexbyte(u8ScanCode);putstr("\r"); // DEbug
 /*       
        if( AmigaKey_RegisterScanCode( u8ScanCode, FALSE ) )
        {
          gau8KeyEventReleased[ u8Column ] &= ~(1<<u8Row);
        }
        else  // scancode buffer full, terminate cycle
        {
          u8Row = MATRIX_ROW;
          u8Column = MATRIX_COL;
        }
*/
      }
    }
  }
}

/*! *******************************************************************
 * \brief  Sample the keys and generate events
 * \param  -
 * \return -
 * \note   Must be called from timed IT routine!
 *********************************************************************/
void Matrix_Sample( void )
{
  //U8 u8Column = 0u;
  //U8 u8Sample = 0u;
  U8 u8Index;
  U8 u8Row;
  
  // read row pins
  u8Row = 0xff;
  for( u8Index = 0u; u8Index < MATRIX_ROW; u8Index++ )
  {
    if ((*gcsKeyMatrixRows[ u8Index ].psGPIOPIN & gcsKeyMatrixRows[ u8Index ].ePin) == 0) u8Row &= ~(1 <<u8Index);
     else u8Row |= (1 <<u8Index);
  }

  debug_byte =  u8Row; 

  // store sampled value of rows
  gau8KeyMatrixSample[ u8Column ][ u8Sample ] = u8Row;

  // generate actual state of keys based on samples
  u8Row = 0u;
  for( u8Index = 0u; u8Index < MATRIX_SAMPLE; u8Index++ )
  {
    u8Row |= gau8KeyMatrixSample[ u8Column ][ u8Index ];  // key presses are registered immediately, releases will be registered after MATRIX_SAMPLE times of the sampling period
  }
  
  // search for events
  gau8KeyEventPressed[ u8Column ]  |= ( gau8KeyMatrixState[ u8Column ] ^ u8Row ) & ~u8Row;
  gau8KeyEventReleased[ u8Column ] |= ( gau8KeyMatrixState[ u8Column ] ^ u8Row ) & u8Row;
  
  // the new state will be the one after the events
  gau8KeyMatrixState[ u8Column ] &= ~gau8KeyEventPressed[ u8Column ];
  gau8KeyMatrixState[ u8Column ] |=  gau8KeyEventReleased[ u8Column ];
  
  // Next column, and next sample
  u8Column++;
  if(u8Column == MATRIX_COL)
  {
    u8Column = 0;
    u8Sample++;
    if( MATRIX_SAMPLE == u8Sample )
    {
      u8Sample = 0;
    }
  }
  
  // look for special key combinations, eg. CTRL + LAmiga + RAmiga
  /*
  if( ( 0u == ( gau8KeyMatrixState[ 14 ] & (1u<<5u) ) )    // ROW5 + COL14 = LAmiga
   && ( 0u == ( gau8KeyMatrixState[  4 ] & (1u<<5u) ) )    // ROW5 + COL4  = RAmiga
   && ( 0u == ( gau8KeyMatrixState[ 14 ] & (1u<<3u) ) ) )  // ROW3 + COL15 = Ctrl
  {
    AmigaKey_Reset();
  }
  */
  // Increment MUX state
  SetColumn( u8Column );
//  debug_byte = u8Column;
}
 
/******************************<EOF>**********************************/
